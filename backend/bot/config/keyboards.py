from typing import List
from django.utils import timezone
from aiogram.types import KeyboardButton, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from apps.faq.models import FAQProblem, FAQTheme
from apps.tariffs.models import Tariff
from apps.configs.models import Config

from bot.config.callbacks import *

from config.environment import ITEMS_PER_PAGE


def main_menu_keyboard():
    builder = ReplyKeyboardBuilder()

    buttons = [
        KeyboardButton(text="üíµ –¢–∞—Ä–∏—Ñ—ã"),
        KeyboardButton(text="üìù –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏"),
        KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"),
        KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"),
        KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å 24/7"),
        KeyboardButton(text="ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"),
        KeyboardButton(text="üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"),
    ]

    builder.row(buttons[0], buttons[1])
    builder.row(buttons[2], buttons[3])
    builder.row(buttons[4])
    builder.row(buttons[5])
    builder.row(buttons[6])

    return builder.as_markup(resize_keyboard=True)


def tariffs_keyboard(tariffs: List[Tariff], page: int = 0):
    builder = InlineKeyboardBuilder()

    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_tariffs = tariffs[start_idx:end_idx]

    for tariff in page_tariffs:
        builder.row(
            InlineKeyboardButton(text=f"{tariff.title} - {tariff.price} —Ä—É–±.", callback_data=TariffCallback(action="tariff", tariff_id=tariff.id).pack())
        )

    pagination_buttons = []

    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=TariffCallback(action="page", tariff_id=0, page=page-1).pack())
        )
    else:
        pagination_buttons.append(
            InlineKeyboardButton(text=" ", callback_data="ignore")
        )

    pagination_buttons.append(
        InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}", callback_data="ignore")
    )

    if end_idx < len(tariffs):
        pagination_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=TariffCallback(action="page", tariff_id=0, page=page+1).pack())
        )
    else:
        pagination_buttons.append(
            InlineKeyboardButton(text=" ", callback_data="ignore")
        )

    if len(tariffs) > ITEMS_PER_PAGE:
        builder.row(*pagination_buttons)

    return builder.as_markup()


def tariff_payment_keyboard(receipt_id: int, url: str, is_balance: bool):    
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ", url=url)
    )

    if is_balance:
        builder.row(
            InlineKeyboardButton(text="–°–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞", callback_data=PaymentCallback(action="balance", receipt_id=receipt_id).pack())
        )

    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=PaymentCallback(action="cancel", receipt_id=receipt_id).pack())
    )

    return builder.as_markup()


def cooperation_keyboard():
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="Google —Ñ–æ—Ä–º–∞", url="https://example.org/")
    )

    builder.adjust(1)
    return builder.as_markup()


def configs_keyboard(configs: List[Config], page: int = 0):
    builder = InlineKeyboardBuilder()

    now = timezone.now()

    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_configs = configs[start_idx:end_idx]

    for config in page_configs:       
        builder.row(
            InlineKeyboardButton(text=f"{config.config_name}.ovpn", callback_data=ConfigCallback(action="config", config_id=config.id).pack())
        )

    builder.row(InlineKeyboardButton(text="üé¨ –í–∏–¥–µ–æ-–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=ConfigCallback(action="instruction", config_id=0).pack()))

    pagination_buttons = []

    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=ConfigCallback(action="page", config_id=0, page=page-1).pack())
        )
    else:
        pagination_buttons.append(
            InlineKeyboardButton(text=" ", callback_data="ignore")
        )

    pagination_buttons.append(
        InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}", callback_data="ignore")
    )

    if end_idx < len(configs):
        pagination_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=ConfigCallback(action="page", config_id=0, page=page+1).pack())
        )
    else:
        pagination_buttons.append(
            InlineKeyboardButton(text=" ", callback_data="ignore")
        )
    
    if len(configs) > ITEMS_PER_PAGE:
        builder.row(*pagination_buttons)

    return builder.as_markup()


def balance_keyboard():
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=BalanceCallback(action="cash_in").pack())
    )

    builder.add(
        InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏", callback_data=BalanceCallback(action="cash_out").pack())
    )

    builder.adjust(2)
    return builder.as_markup()


def cancel_operation_keyboard():
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CancelBalanceOperationCallback().pack())
    )

    builder.adjust(1)
    return builder.as_markup()


def cash_in_payment_keyboard(operation_id: int, url: str):
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", url=url)
    )

    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=OperationCallback(operation_id=operation_id, action="cancel").pack())
    )

    return builder.as_markup()


def faq_keyboard():
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", callback_data=FAQCallback(action="instruction").pack())
    )

    builder.add(
        InlineKeyboardButton(text="VPN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data=FAQCallback(action="problems").pack())
    )

    builder.add(
        InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∏", callback_data=FAQCallback(action="sub").pack())
    )

    builder.add(
        InlineKeyboardButton(text="–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data=FAQCallback(action="tech_support").pack())
    )

    builder.add(
        InlineKeyboardButton(text="–í—ã–ø–ª–∞—Ç—ã", callback_data=FAQCallback(action="cash_outs").pack())
    )

    builder.adjust(1)
    return builder.as_markup()


def configs_sub_keyboard(configs: List[Config], page: int = 0):
    builder = InlineKeyboardBuilder()

    now = timezone.now()

    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_configs = configs[start_idx:end_idx]

    for config in page_configs:
        if config.expiring_at < now.date():
            continue
        
        builder.row(
            InlineKeyboardButton(text=f"{config.config_name}.ovpn", callback_data=ConfigSubCallback(action="config", config_id=config.id).pack())
        )

    pagination_buttons = []

    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=ConfigSubCallback(action="page", config_id=0, page=page-1).pack())
        )
    else:
        pagination_buttons.append(
            InlineKeyboardButton(text=" ", callback_data="ignore")
        )

    pagination_buttons.append(
        InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}", callback_data="ignore")
    )

    if end_idx < len(configs):
        pagination_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=ConfigSubCallback(action="page", config_id=0, page=page+1).pack())
        )
    else:
        pagination_buttons.append(
            InlineKeyboardButton(text=" ", callback_data="ignore")
        )
    
    if len(configs) > ITEMS_PER_PAGE:
        builder.row(*pagination_buttons)

    return builder.as_markup()


def retry_reccurent_payment_keyboard(config_id: int):
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=RetryReccurentCallback(config_id=config_id).pack())
    )

    builder.adjust(1)
    return builder.as_markup()


def restore_sub(config_id: int):
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=RestoreSubCallback(action="restore", config_id=config_id).pack())
    )

    builder.add(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=RestoreSubCallback(action="back", config_id=config_id).pack())
    )

    builder.adjust(1)
    return builder.as_markup()


def cancel_sub(config_id: int):
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=ConfigCancelSubCallback(action="cancel", config_id=config_id).pack())
    )

    builder.add(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=ConfigCancelSubCallback(action="back", config_id=config_id).pack())
    )

    builder.adjust(1)
    return builder.as_markup()


def cancel_sub_confirm(config_id: int):
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=ConfigCancelSubConfirmCallback(action="cancel", config_id=config_id).pack())
    )

    builder.add(
        InlineKeyboardButton(text="–ù–µ—Ç, –Ω–µ –æ—Ç–º–µ–Ω—è—Ç—å", callback_data=ConfigCancelSubConfirmCallback(action="back", config_id=config_id).pack())
    )

    builder.adjust(1)
    return builder.as_markup()


def themes_keyboard(themes: List[FAQTheme], page: int = 0):
    builder = InlineKeyboardBuilder()

    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_themes = themes[start_idx:end_idx]

    for theme in page_themes:
        builder.row(
            InlineKeyboardButton(text=theme.title, callback_data=ThemeCallback(action="theme", theme_id=theme.id).pack())
        )

    pagination_buttons = []

    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=ThemeCallback(action="page", theme_id=0, page=page-1).pack())
        )
    else:
        pagination_buttons.append(
            InlineKeyboardButton(text=" ", callback_data="ignore")
        )

    pagination_buttons.append(
        InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}", callback_data="ignore")
    )

    if end_idx < len(themes):
        pagination_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=ThemeCallback(action="page", theme_id=0, page=page+1).pack())
        )
    else:
        pagination_buttons.append(
            InlineKeyboardButton(text=" ", callback_data="ignore")
        )
    
    if len(themes) > ITEMS_PER_PAGE:
        builder.row(*pagination_buttons)

    return builder.as_markup()


def problems_keyboard(problems: List[FAQProblem], theme_id: int, page: int = 0):
    builder = InlineKeyboardBuilder()

    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_problems = problems[start_idx:end_idx]

    for problem in page_problems:
        builder.row(
            InlineKeyboardButton(text=problem.question, callback_data=ProblemCallback(action="problem", theme_id=theme_id, problem_id=problem.id).pack())
        )

    pagination_buttons = []

    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=ProblemCallback(action="page", theme_id=theme_id, problem_id=0, page=page-1).pack())
        )
    else:
        pagination_buttons.append(
            InlineKeyboardButton(text=" ", callback_data="ignore")
        )

    pagination_buttons.append(
        InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}", callback_data="ignore")
    )

    if end_idx < len(problems):
        pagination_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=ProblemCallback(action="page", theme_id=theme_id, problem_id=0, page=page+1).pack())
        )
    else:
        pagination_buttons.append(
            InlineKeyboardButton(text=" ", callback_data="ignore")
        )
    
    if len(problems) > ITEMS_PER_PAGE:
        builder.row(*pagination_buttons)

    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data=ProblemCallback(action="back", theme_id=theme_id, problem_id=0).pack())
    )

    return builder.as_markup()


def problem_keyboard(theme_id: int):
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º", callback_data=SolutionCallback(theme_id=theme_id).pack())
    )

    return builder.as_markup()


def complete_cash_out_keyboard(operation_id: int):
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ!", callback_data=CompleteCashOutCallback(action="done", operation_id=operation_id).pack())
    )

    builder.add(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", callback_data=CompleteCashOutCallback(action="cancel", operation_id=operation_id).pack())
    )

    return builder.as_markup()
