version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    command: >
      /bin/sh -c "python manage.py migrate && daphne -b 0.0.0.0 -p 8000 config.asgi:application"
    volumes:
      - backend_static:/app/static
      - /etc/openvpn:/etc/openvpn
      - ./openvpn-install.sh:/app/openvpn-install.sh
      - ./openvpn_configs:/app/openvpn_configs
    ports:
      - "8000:8000"
    env_file:
      - ./.env.dev
    depends_on:
      db:
        condition: service_healthy
    networks:
      - vpn_network

  bot:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bot
    command: >
      /bin/sh -c "python manage.py runbot"
    volumes:
      - ./openvpn_configs:/app/openvpn_configs
      - ./openvpn-install.sh:/app/openvpn-install.sh
      - /etc/openvpn:/etc/openvpn
      - /var/log/syslog:/app/syslog
    env_file:
      - ./.env
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - vpn_network

  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    restart: always
    ports:
      - "6379:6379"

  celery:
    container_name: celery
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A config.celery_app worker --loglevel=info
    depends_on:
      - backend
      - bot
      - redis
    volumes:
      - ./openvpn_configs:/app/openvpn_configs
      - ./openvpn-install.sh:/app/openvpn-install.sh
      - /etc/openvpn:/etc/openvpn
      - /var/log/syslog:/app/syslog
    env_file:
      - ./.env

  db:
    image: postgres:latest
    container_name: postgres
    volumes:
      - ./postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.dev
    networks:
      - vpn_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus-data:/prometheus/data
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - vpn_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    command: >
      /bin/sh -c "sudo chmod -R 755 /var/lib/grafana"
    env_file:
      - ./.env.dev
    ports:
      - "3000:3000"
    volumes:
      - ./grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - vpn_network

  nginx:
    build:
      context: ./nginx/dev
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    volumes:
      - backend_static:/backend/static:ro
    networks:
      - vpn_network

networks:
  vpn_network:

volumes:
  backend_static:
